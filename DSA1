//Rotate the array to the right by k steps
//Eg: nums = [1,2,3,4,5,6,7]  k = 3
// O/p = nums = [5,6,7,1,2,3,4] 
class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);
    }
    public void reverse(int nums[] , int start,int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}
T.C = O(n)
S.C = O(1) 

//Move the zeros to the end of the array
//Eg : nums = [1,0,3,0,12]
// o/p : nums = [1,3,12,0,0]

class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0;
        for(int i =0;i <nums.length;i++){
           if(nums[i] != 0){
                 nums[count] = nums[i];
                 count++;
           }
        }
        for(int i = count;i < nums.length;i++){
            nums[i] = 0;
        }
    }
}
            
 T.C = O(n)
 S.C = O(1)

// Remove the outermost parenthesis in the given string
Eg: str = "(()())((()))"
o/p : str = "()()(())"
class Solution {
    public String removeOuterParentheses(String s) {
        int len = s.length();
        char c[] = s.toCharArray();
        StringBuilder sb = new StringBuilder("");
        Stack<Character> s1 = new Stack<>();
        for(int i =0;i <len;i++){
            if(c[i] == '('){
                if(!s1.isEmpty()){
                    sb.append('(');
                }
                s1.push(c[i]);
            }
            else{
                s1.pop();
                if(!s1.isEmpty()){
                    sb.append(')');
                }
            }
        }
        return sb.toString();
    }
}
T.C = O(n)
S.C = O(n)
