//Floor in sorted array(to find the lower bound)
class Solution {

    static int findFloor(long arr[], int n, long x) {
        int s =0;
        int e = arr.length -1;
        
        while(s <= e){
            int mid = s + (e -s)/2;
            if(arr[mid] == x){
                return mid ;
            }else if( arr[mid] < x){
                s = mid +1;
            }else if(arr[mid] > x){
                e = mid -1;
            }
        }
        return e;
    }
}

//Search insert position
Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
class Solution {
    public int searchInsert(int[] nums, int target) {
        int s = 0;
        int e = nums.length -1;
        while(s <= e){
            int mid = s + (e-s)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] < target){
                s = mid +1;
            }else{
                e = mid -1;
            }
        }
        return s ;
    }
}

//Floor & Ceil problem
Input: x = 7 , arr[] = [5, 6, 8, 9, 6, 5, 5, 6]
Output: 6, 8
Explanation: Floor of 7 is 6 and ceil of 7 is 8.
    
class Solution {
    public int[] getFloorAndCeil(int x, int[] arr) {
        int floor = -1;
        int ceil = -1;
        Arrays.sort(arr);
        int s = 0;
        int e = arr.length- 1;
        
        while(s <= e){
            int mid = (s+e)/2;
            if(arr[mid] == x){
                floor = arr[mid];
                ceil = arr[mid];
                break;
            }else if(arr[mid] < x){
                floor = arr[mid];
                s = mid +1;
            }else{
                ceil = arr[mid];
                e = mid -1;
            }
        }
        return new int[]{floor,ceil};
    }
}
